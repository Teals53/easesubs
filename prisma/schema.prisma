generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String                 @unique
  emailVerified    DateTime?              @map("email_verified")
  password         String?
  image            String?
  role             UserRole               @default(USER)
  isActive         Boolean                @default(true) @map("is_active")
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
  resetToken       String?                @map("reset_token")
  resetTokenExpiry DateTime?              @map("reset_token_expiry")
  accounts         Account[]
  cartItems        CartItem[]
  orders           Order[]
  reviews          Review[]
  sessions         Session[]
  ticketMessages   SupportTicketMessage[]
  assignedTickets  SupportTicket[]        @relation("AssignedAgent")
  supportTickets   SupportTicket[]
  subscriptions    UserSubscription[]
  securityEvents   SecurityEvent[]

  @@index([email])
  @@index([isActive])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  description    String?
  categoryId     String          @map("category_id")
  logoUrl        String?         @map("logo_url")
  borderColor    String?         @map("border_color")
  isActive       Boolean         @default(true) @map("is_active")
  isFeatured     Boolean         @default(false) @map("is_featured")
  displayOrder   Int?            @map("display_order")
  seoTitle       String?         @map("seo_title")
  seoDescription String?         @map("seo_description")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  plans          ProductPlan[]
  reviews        Review[]
  category       Category        @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([displayOrder])
  @@index([createdAt])
  @@index([slug])
  @@map("products")
}

model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  slug         String    @unique
  description  String?
  color        String?   // Hex color code for UI theming
  icon         String?   // Icon name or URL
  isActive     Boolean   @default(true) @map("is_active")
  displayOrder Int?      @map("display_order")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  products     Product[]

  @@map("categories")
}

model ProductPlan {
  id               String             @id @default(cuid())
  productId        String             @map("product_id")
  name             String
  planType         String             @map("plan_type")
  price            Decimal            @db.Decimal(10, 2)
  originalPrice    Decimal?           @map("original_price") @db.Decimal(10, 2)
  currency         String             @default("USD")
  billingPeriod    BillingPeriod      @map("billing_period")
  duration         Int
  features         Json?
  isPopular        Boolean            @default(false) @map("is_popular")
  isAvailable      Boolean            @default(true) @map("is_available")
  maxSubscriptions Int?               @map("max_subscriptions")
  deliveryType     DeliveryType       @map("delivery_type")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  cartItems        CartItem[]
  orderItems       OrderItem[]
  product          Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions    UserSubscription[]
  stockItems       StockItem[]

  @@unique([productId, planType])
  @@map("product_plans")
}

model UserSubscription {
  id            String             @id @default(cuid())
  userId        String             @map("user_id")
  planId        String             @map("plan_id")
  orderId       String?            @map("order_id")
  status        SubscriptionStatus @default(PENDING)
  startDate     DateTime?          @map("start_date")
  endDate       DateTime?          @map("end_date")
  renewalDate   DateTime?          @map("renewal_date")
  cancelledAt   DateTime?          @map("cancelled_at")
  pausedAt      DateTime?          @map("paused_at")
  price         Decimal            @db.Decimal(10, 2)
  currency      String             @default("USD")
  billingPeriod BillingPeriod      @map("billing_period")
  autoRenew     Boolean            @default(true) @map("auto_renew")
  notes         String?
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  order         Order?             @relation(fields: [orderId], references: [id])
  plan          ProductPlan        @relation(fields: [planId], references: [id])
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@index([renewalDate])
  @@index([planId])
  @@map("user_subscriptions")
}

model Order {
  id             String             @id @default(cuid())
  userId         String             @map("user_id")
  orderNumber    String             @unique @map("order_number")
  status         OrderStatus        @default(PENDING)
  paymentMethod  PaymentMethod      @map("payment_method")
  paymentId      String?            @map("payment_id")
  subtotal       Decimal            @db.Decimal(10, 2)
  tax            Decimal            @default(0) @db.Decimal(10, 2)
  total          Decimal            @db.Decimal(10, 2)
  currency       String             @default("USD")
  paymentDetails Json?              @map("payment_details")
  notes          String?
  completedAt    DateTime?          @map("completed_at")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  items          OrderItem[]
  user           User               @relation(fields: [userId], references: [id])
  payments       Payment[]
  subscriptions  UserSubscription[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([completedAt])
  @@index([orderNumber])
  @@map("orders")
}

model OrderItem {
  id           String           @id @default(cuid())
  orderId      String           @map("order_id")
  planId       String           @map("plan_id")
  quantity     Int              @default(1)
  price        Decimal          @db.Decimal(10, 2)
  currency     String           @default("USD")
  deliveryType DeliveryType     @map("delivery_type")
  deliveredAt  DateTime?        @map("delivered_at")
  ticketId     String?          @map("ticket_id")
  stockItemId  String?          @map("stock_item_id")
  createdAt    DateTime         @default(now()) @map("created_at")
  order        Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  plan         ProductPlan      @relation(fields: [planId], references: [id])
  ticket       SupportTicket?   @relation(fields: [ticketId], references: [id])
  stockItem    StockItem?       @relation(fields: [stockItemId], references: [id])
  reviews      Review[]

  @@map("order_items")
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String        @map("order_id")
  method            PaymentMethod
  providerPaymentId String?       @map("provider_payment_id")
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("USD")
  status            PaymentStatus @default(PENDING)
  providerData      Json?         @map("provider_data")
  webhookData       Json?         @map("webhook_data")
  refundAmount      Decimal?      @map("refund_amount") @db.Decimal(10, 2)
  refundedAt        DateTime?     @map("refunded_at")
  completedAt       DateTime?     @map("completed_at")
  failureReason     String?       @map("failure_reason")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  order             Order         @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model CartItem {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  planId    String      @map("plan_id")
  quantity  Int         @default(1)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  plan      ProductPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, planId])
  @@map("cart_items")
}

model Review {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  productId   String    @map("product_id")
  orderItemId String    @map("order_item_id")
  rating      Int       @db.SmallInt // 1-5 rating
  title       String?
  comment     String?
  isVerified  Boolean   @default(true) @map("is_verified") // Always true since only buyers can review
  isApproved  Boolean   @default(true) @map("is_approved") // Auto-approve verified purchases
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([userId, orderItemId]) // One review per order item per user
  @@map("reviews")
}

model SupportTicket {
  id              String                    @id @default(cuid())
  ticketNumber    String                    @unique @map("ticket_number")
  userId          String                    @map("user_id")
  assignedAgentId String?                   @map("assigned_agent_id")
  orderId         String?                   @map("order_id")
  title           String
  description     String
  status          TicketStatus              @default(OPEN)
  priority        TicketPriority            @default(MEDIUM)
  category        TicketCategory            @default(GENERAL)
  tags            String[]                  @default([])
  isInternal      Boolean                   @default(false) @map("is_internal")
  isAutoCreated   Boolean                   @default(false) @map("is_auto_created")
  resolvedAt      DateTime?                 @map("resolved_at")
  closedAt        DateTime?                 @map("closed_at")
  firstResponseAt DateTime?                 @map("first_response_at")
  lastActivityAt  DateTime?                 @map("last_activity_at")
  createdAt       DateTime                  @default(now()) @map("created_at")
  updatedAt       DateTime                  @updatedAt @map("updated_at")
  attachments     SupportTicketAttachment[]
  messages        SupportTicketMessage[]
  assignedAgent   User?                     @relation("AssignedAgent", fields: [assignedAgentId], references: [id])
  user            User                      @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]

  @@map("support_tickets")
}

model SupportTicketMessage {
  id         String        @id @default(cuid())
  ticketId   String        @map("ticket_id")
  userId     String        @map("user_id")
  message    String
  isInternal Boolean       @default(false) @map("is_internal")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id])

  @@map("support_ticket_messages")
}

model SupportTicketAttachment {
  id         String        @id @default(cuid())
  ticketId   String        @map("ticket_id")
  fileName   String        @map("file_name")
  fileSize   Int           @map("file_size")
  fileType   String        @map("file_type")
  fileUrl    String        @map("file_url")
  uploadedAt DateTime      @default(now()) @map("uploaded_at")
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("support_ticket_attachments")
}

model StockItem {
  id         String      @id @default(cuid())
  planId     String      @map("plan_id")
  content    String      // The actual product content (license key, credentials, etc.)
  isUsed     Boolean     @default(false) @map("is_used")
  usedAt     DateTime?   @map("used_at")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  plan       ProductPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("stock_items")
}

enum UserRole {
  USER
  ADMIN
  SUPPORT_AGENT
  MANAGER
}

enum BillingPeriod {
  MONTHLY
  YEARLY
  LIFETIME
  CUSTOM
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CRYPTOMUS
  WEEPAY
  ADMIN_BYPASS
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  GENERAL
  ORDER_ISSUES
  PAYMENT_PROBLEMS
  PRODUCT_QUESTIONS
  TECHNICAL_SUPPORT
  RETURNS_REFUNDS
  ACCOUNT_ISSUES
  BILLING_INQUIRIES
}

enum DeliveryType {
  MANUAL
  AUTOMATIC
}

model SecurityEvent {
  id        String   @id @default(cuid())
  type      String
  severity  String
  source    String
  ip        String?
  userAgent String?  @map("user_agent")
  userId    String?  @map("user_id")
  details   Json
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([timestamp])
  @@index([severity])
  @@index([type])
  @@index([ip])
  @@map("security_events")
}

model BlockedIP {
  id        String    @id @default(cuid())
  ip        String    @unique
  reason    String
  score     Int       @default(0)
  blockedAt DateTime  @default(now()) @map("blocked_at")
  expiresAt DateTime? @map("expires_at")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([ip])
  @@index([isActive])
  @@index([expiresAt])
  @@map("blocked_ips")
}
